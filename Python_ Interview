1.python函数传递?
	1)当一个引用传递给函数的时候,函数自动复制一份引用,函数中引用和外部没有没有关系了;
	2)对于可变变量,对该引用的变量进行操作时会改变原来变量的值;而对于不可变的(str,tuple,int等),不会影响外部引用指向的值
	
2.元类?
	1)元类 type 或者继承自type的其他类
	2)元类是用来创造其他类的 MyClass=type('Foo',(),{}),很少用到
	3)Django orm 用元类来实现  参考 models 定义
	
3.实例方法,类方法,静态方法?
	1)实例方法:必须实例化该类才能被调用(Py3不实例化直接用用类调用,会直接返回这个类对象内存地址)
	2)类方法:无需实例化这个类而能被直接调用(也可以被实例调用),可以被子类继承和重写;
		传入的都是类对象,主要用于工厂方法,具体交给子类实现
	3)静态方法:
		无需实例化即可调用,而多个实例对象也可以共用一个静态方法;
		静态方法不能访问类变量和实例变量.

4.Python的自省?
	程序运行时能够知道对象的类型或属性,例如(type,dir,hasAttr,isinstance 等)

5.字典推导式?
	Py2.7时加入
	{key:val for (key,val) in dict.items()}

6.Python中单下划线和双下划线?
	1)单下划线 _func :自定义变量或函数,不能通过 from* import 导入,只能通过类实例来访问;
	2)双下划线 __func:自定义私有属性或函数,即使实例化或子类继承也不能被(直接)访问(解释器会改为_class__func来进行访问,但不同解释器规则可能不一样)
	3)__attr__,两头下划线: Python 内部保留的属性名称易区别于自定义名称,防止冲突
	Tip:Python 中没有 protected 这个说法,要么共有,要么私有
7.
























	
